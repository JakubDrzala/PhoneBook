import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/*


            !!!!!! 218 - EDIT   !!!!!!
            !!!!!  223 - delete !!!!!!


*/


public class MainFrame extends JFrame {
    private JPanel mainPanel;
    private JButton addButton;
    private JComboBox comboBox1;
    public JTable table1;
    private Object[][] data = {
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
            {1, "name1", "secondname1", 12321, "ewq@eqw.qw","edit","delete"},
            {2, "name2", "secondname2", 65454, "kjl@eqw.qw","edit","delete"},
            {3, "name3", "secondname3", 97897, "asdas@eqw.qw","edit","delete"},
    };
    private Object[] columnNames = {"id", "name", "secondname", "phone", "email", "edit", "delete"};


    public MainFrame() {
        setContentPane(mainPanel);
        setTitle("test");
        setSize(500, 500);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);
        table1.getColumn("edit").setCellRenderer(new ButtonRenderer());
        table1.getColumn("edit").setCellEditor(new ButtonEditor(new JCheckBox(),table1,"edit"));
        table1.getColumn("delete").setCellRenderer(new ButtonRenderer());
        table1.getColumn("delete").setCellEditor(new ButtonEditor(new JCheckBox(),table1,"delete"));
        table1.setPreferredScrollableViewportSize(table1.getPreferredSize());
        table1.getColumnModel().getColumn(0).setPreferredWidth(100);

    }
    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }



    public static void main(String[] args) {
        new MainFrame();
    }



    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setMaximumSize(new Dimension(50, 2147483647));
        mainPanel.setMinimumSize(new Dimension(50, 17));
        mainPanel.setPreferredSize(new Dimension(50, 17));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 0.5;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(panel1, gbc);
        addButton = new JButton();
        addButton.setText("add");
        panel1.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        panel1.add(comboBox1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Launguage:");
        panel1.add(label1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(scrollPane1, gbc);
        table1 = new JTable(data,columnNames);
        scrollPane1.setViewportView(table1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
class ButtonEditor extends DefaultCellEditor {

    protected JButton button;
    private String label;
    private boolean isPushed;
    private JTable tableData;
    private String actionType;

    public ButtonEditor(JCheckBox checkBox,JTable table, String action) {
        super(checkBox);
        tableData = table;
        actionType = action;
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fireEditingStopped();
            }
        });
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected, int row, int column) {
        if (isSelected) {
            button.setForeground(table.getSelectionForeground());
            button.setBackground(table.getSelectionBackground());
        } else {
            button.setForeground(table.getForeground());
            button.setBackground(table.getBackground());
        }
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        if (isPushed) {
            switch (actionType){
                case "edit":
                    edit();
                    break;
                case "delete":
                    delete();
                    break;
            }
        }
        isPushed = false;
        return label;
    }

    @Override
    public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
    }

    public void edit(){
        JOptionPane.showMessageDialog(button, "edit - " + tableData.getSelectedRow());
        // data.edit(tableData.getSelectedRow()) -- odw do metody do innej klassy i metody edit(int indexOfRow)
    }

    public void delete(){
        JOptionPane.showMessageDialog(button, "delete - " + tableData.getSelectedRow());
        // data.delete(tableData.getSelectedRow()) -- odw do metody do innej klassy i metody delete(int indexOfRow)
    }
}